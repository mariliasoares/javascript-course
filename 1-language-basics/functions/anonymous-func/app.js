const startGameBtn = document.getElementById('start-game-btn');
const startNoneFuncBtn = document.getElementById('start-game-btn2');
function startGame() { //declaration
  console.log("Game is starting...");
}

//can store functions in variables, as expressions instead of declaration(statement)
// const start = function startGame() { //expression, right side of equal sign
//   console.log("Game is starting...");
// }
//we store the function on that variable, and then that constant is stored in a global scope
//and then we cant reference that function by that name anyways and hence, we can also omit it.

const start = function() { //anonymous function = storing a function in a constant.
  console.log("Game is starting...");
}; //semicolon after it.

startGame(); //direct execution

startGameBtn.addEventListener('click', start); //indirect execution

const person = {
  name: 'Max', //a property
  greet: function greet() { // a method => a function attached to an object
    console.log('Hello there!');
  }
};

console.log(person.name); //normal object
//functions can be stored by objects as well
person.greet();

//addEventListener provided by browser
// is a method provided by the startGameBtn
//startGameBtn generated by JS by calling getElementById which exists in document, a global variable 
// and functions themselves are objects
console.dir(startGame); 

//so instead of using only 1 time a function that was declared in somewhere, instead
// everything is defined in place here
startNoneFuncBtn.addEventListener('click', function() {
  console.log('Here I am! None function here');
});